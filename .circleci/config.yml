version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0
  aws-ecr: circleci/aws-ecr@9.0

jobs:
  lint:
    docker:
      - image: cimg/node:16.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [install]
      - run:
          name: Lint app
          command: |
            npm install
            npm run lint
      - save_cache:
          paths: [node_modules]
          key: install
  
  test:
    docker:
      - image: cimg/node:16.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [install]
      - run:
          name: Run test
          command: |
            npm install
            npm run test

  scan:
    docker:
      - image: cimg/node:16.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [install]
      - run: 
          name: Scan dependencies
          command: |
            npm install
            npm audit

  build-and-push-image:
    docker:
      - image: cimg/node:16.18.1
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - aws-ecr/build_and_push_image:
          auth:
            - aws-cli/setup
          repo: "${ECR_REPOSITORY_NAME}"
          tag: latest, ${CIRCLE_SHA1:0:6}
          extra_build_args: |
            --build-arg DATABASE_URL=${DATABASE_URL}
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure EKS network exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/network.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-network" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://.circleci/cloudformation/network-parameters.json
      - run:
          name: Ensure EKS Cluster and Nodegroup exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/cluster.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-cluster" \
              --region ${AWS_DEFAULT_REGION} \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 15m
      - run:
          name: Ensure management instances exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/management.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-management" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://.circleci/cloudformation/management-parameters.json \
              --output text >> ~/checkIfDeployed.txt
            cat ~/checkIfDeployed.txt
      - run:
          name: Extract the IPs of the management instances for Ansible
          command: |
            echo [management] > ~/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - checkIfDeployed.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "18:3b:f5:9c:b2:34:48:51:ac:e1:6e:71:35:d3:07:1f"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            if grep -q "No changes to deploy" ~/checkIfDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                cd ansible
                ansible-playbook -i ~/inventory.txt configure-server.yml
              fi

  configure-cluster:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "18:3b:f5:9c:b2:34:48:51:ac:e1:6e:71:35:d3:07:1f"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            if grep -q "No changes to deploy" ~/checkIfDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                cd ansible
                ansible-playbook -i ~/inventory.txt configure-cluster.yml
              fi
      - run:
          name: Wait for LoadBalancer's domain to become reachable
          command: |
            if grep -q "No changes to deploy" ~/checkIfDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                echo "Wait 60 seconds..."
                sleep 60
              fi
      - run:
          name: Display the LoadBalancer's DNS name
          command: |
            cat ~/inventory.txt
            cd ansible
            ansible-playbook -i ~/inventory.txt elb-dns.yml
            cat ~/elb_dns.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - elb_dns.txt

  deploy-app:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "18:3b:f5:9c:b2:34:48:51:ac:e1:6e:71:35:d3:07:1f"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy newest Docker Image
          command: |
            cat ~/inventory.txt
            cd ansible
            ansible-playbook -i ~/inventory.txt deploy-app.yml
          no_output_timeout: 2m
        
workflows:
  default:
    jobs:
      - lint
      - test:
          requires: [lint]
      - scan:
          requires: [test]
      - build-and-push-image:
          requires: [scan]
      - deploy-infrastructure:
          filters:
            branches:
              only: [ master ]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - configure-cluster:
          requires:
            - configure-infrastructure
            - build-and-push-image
      - deploy-app:
          requires:
            - configure-cluster
